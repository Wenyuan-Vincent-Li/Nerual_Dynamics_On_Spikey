{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"step",
				"step_training\tstatement"
			],
			[
				"trainin",
				"training_weight_no\tstatement"
			],
			[
				"tra",
				"training_weight_no\tstatement"
			],
			[
				"eval",
				"evaluating_no\tstatement"
			],
			[
				"eva",
				"evaluating_no\tstatement"
			],
			[
				"train",
				"training_weight_no\tstatement"
			],
			[
				"Inputprj",
				"Inputprj_E\tstatement"
			],
			[
				"end_",
				"end_evaluating"
			],
			[
				"start",
				"start_evaluating"
			],
			[
				"pred",
				"pred\tstatement"
			],
			[
				"input",
				"input_rate\tstatement"
			],
			[
				"static",
				"static_synapse\tstatement"
			],
			[
				"Input",
				"Inputprj_E\tstatement"
			],
			[
				"as",
				"as_int"
			],
			[
				"bat",
				"batch_end\tstatement"
			],
			[
				"tr",
				"step_training"
			],
			[
				"rec",
				"record_interval\tstatement"
			],
			[
				"we_",
				"we_winner\tstatement"
			],
			[
				"label",
				"labelindex\tstatement"
			],
			[
				"data",
				"data_seq\tstatement"
			],
			[
				"batch",
				"batch_size\tstatement"
			],
			[
				"inpu",
				"input_rate\tparam"
			],
			[
				"traing",
				"training_data\tstatement"
			],
			[
				"end",
				"end_training\tstatement"
			],
			[
				"training",
				"training_data\tstatement"
			],
			[
				"stra",
				"start_training\tstatement"
			],
			[
				"MNIS",
				"MNIST_dataset\tstatement"
			],
			[
				"MNI",
				"MNIST_dataset\tstatement"
			],
			[
				"fil",
				"filename_postfix\tstatement"
			],
			[
				"testing",
				"testing_data\tstatement"
			],
			[
				"testin",
				"testing_data\tstatement"
			],
			[
				"wi",
				"wi_target\tstatement"
			],
			[
				"we",
				"we_target\tstatement"
			],
			[
				"delta_w",
				"delta_w_plus\tstatement"
			],
			[
				"delta",
				"delta_w_plus\tstatement"
			],
			[
				"traini",
				"training_data\tstatement"
			],
			[
				"W",
				"w_I\tstatement"
			],
			[
				"prj",
				"prj_I\tstatement"
			],
			[
				"S",
				"StaticSynapse"
			],
			[
				"I",
				"Input\tstatement"
			],
			[
				"input_",
				"input_rate"
			],
			[
				"trai",
				"training_data\tstatement"
			],
			[
				"del",
				"delimiter\tparam"
			],
			[
				"early",
				"early_stop_flag\tstatement"
			],
			[
				"test",
				"testing_label\tstatement"
			],
			[
				"tes",
				"testing_size\tparam"
			],
			[
				"ear",
				"early_stop_flag\tstatement"
			],
			[
				"i",
				"i\tforstmt"
			],
			[
				"ea",
				"early_stop_flag\tstatement"
			],
			[
				"dec",
				"dec_correct\tstatement"
			],
			[
				"w1",
				"w1_I\tstatement"
			],
			[
				"connector_mat",
				"connector_mat_1_i\tstatement"
			],
			[
				"spike",
				"spike_count\tstatement"
			],
			[
				"max",
				"max_iter\tparam"
			],
			[
				"syn1_",
				"syn1_I\tstatement"
			],
			[
				"syn0_",
				"syn0_I\tstatement"
			],
			[
				"syn",
				"syn0_E"
			],
			[
				"w_ei",
				"w_ei\tstatement"
			],
			[
				"as_",
				"as_int"
			],
			[
				"gen",
				"Generating_data\tstatement"
			],
			[
				"num_dec",
				"num_dec_neurons\tstatement"
			],
			[
				"num_de",
				"num_dec_neurons\tstatement"
			],
			[
				"num",
				"num_output\tstatement"
			],
			[
				"delt",
				"delta_w_minus\tstatement"
			],
			[
				"inh",
				"inh_pops\tstatement"
			],
			[
				"If",
				"IF_cond_exp"
			],
			[
				"in",
				"inh_pops\tstatement"
			],
			[
				"w_m",
				"w_min\tstatement"
			],
			[
				"unit",
				"unit_id_tup\tstatement"
			],
			[
				"dle",
				"delta_w_minus\tstatement"
			],
			[
				"ran",
				"rank_thresh\tstatement"
			],
			[
				"pre",
				"pre_rates\tstatement"
			],
			[
				"sum",
				"sum_spiketrain"
			],
			[
				"get",
				"get_data"
			],
			[
				"run",
				"run_time\tstatement"
			],
			[
				"bridge",
				"bridge_connection\tstatement"
			],
			[
				"pynn",
				"pynn\tstatement"
			],
			[
				"Dec",
				"Dec_spikecounts\tstatement"
			],
			[
				"conn",
				"connector_mat_1\tstatement"
			],
			[
				"Res",
				"ResNeuron\tstatement"
			],
			[
				"pyn",
				"pynn\tstatement"
			],
			[
				"num_input",
				"num_input_neuron\tparam"
			],
			[
				"load",
				"loadtxt\tfunction"
			],
			[
				"dat",
				"data_gen\timport"
			],
			[
				"spi",
				"spike_source_2\tstatement"
			],
			[
				"spike_time",
				"spike_time_1\tstatement"
			],
			[
				"sour",
				"source_rate\tstatement"
			],
			[
				"av",
				"average_fir_out2\tparam"
			],
			[
				"ave",
				"average_fir_out1\tstatement"
			],
			[
				"w",
				"w2_2\tstatement"
			],
			[
				"w2",
				"w2_2"
			],
			[
				"syn_",
				"syn_2_2\tstatement"
			],
			[
				"Data",
				"Data_O\tstatement"
			],
			[
				"save",
				"savetxt\tfunction"
			],
			[
				"de",
				"delimiter\tparam"
			],
			[
				"asa",
				"asarray\tfunction"
			],
			[
				"No",
				"None\tinstance"
			],
			[
				"hash",
				"hashdata\tstatement"
			],
			[
				"file",
				"filename\tstatement"
			],
			[
				"w_2",
				"w2_1"
			],
			[
				"w1_",
				"w1_2\tstatement"
			],
			[
				"iter",
				"iter_no\tstatement"
			],
			[
				"Da",
				"Data_O\tstatement"
			],
			[
				"connec",
				"connector1_1\tstatement"
			],
			[
				"O",
				"Out\tstatement"
			],
			[
				"P",
				"Post_no\tstatement"
			],
			[
				"wei",
				"weightAfter\tstatement"
			],
			[
				"spikeSour",
				"spikeSourceStim\tstatement"
			],
			[
				"spikeS",
				"spikeSourcePlastic\tstatement"
			],
			[
				"stimu",
				"stimulusPlastic\tstatement"
			],
			[
				"interv",
				"intervalPairs\tstatement"
			],
			[
				"stop",
				"stop_time_3\tstatement"
			],
			[
				"no",
				"no_run\tstatement"
			],
			[
				"spike_ti",
				"spike_time\tstatement"
			],
			[
				"spikes",
				"spikes_in\tstatement"
			],
			[
				"cell_",
				"cell_type_parameters\tstatement"
			],
			[
				"Ie",
				"Ie_I_connections\tstatement"
			],
			[
				"weight",
				"weight_inp\tstatement"
			],
			[
				"Exc",
				"Excinp\tstatement"
			],
			[
				"out",
				"output\tstatement"
			],
			[
				"spike_",
				"spikes_test_robostness"
			],
			[
				"exp",
				"exp_no\tstatement"
			],
			[
				"Winp",
				"Winp_no\tstatement"
			],
			[
				"sta",
				"static_synapse_ie\tstatement"
			],
			[
				"aver",
				"average_fir\tstatement"
			],
			[
				"N",
				"N_e\tstatement"
			],
			[
				"spik",
				"spikes_event\tstatement"
			],
			[
				"it",
				"ite_no\tstatement"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 207.0,
		"last_filter": "python",
		"selected_items":
		[
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"prefe",
				"Preferences: Browse Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/wenyuan/Documents/PyNN/Test/pynn_reset_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/run_until_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST/MNIST_data/data_gen.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST/structure_gen.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST/network_config.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST/network.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST/network_controller.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST.py",
		"/Users/wenyuan/Documents/PyNN/weight_test.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/numpy/core/fromnumeric.py",
		"/Users/wenyuan/Documents/PyNN/mod_test.py",
		"/Users/wenyuan/Documents/PyNN/MINIST_input_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_MNIST/data_gen.py",
		"/Users/wenyuan/Documents/PyNN/Test/MNIST_input_pynn_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/input_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/MINIST_input_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test/network.py",
		"/Users/wenyuan/Documents/PyNN/MNIST_input_pynn_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test/MINIST_input_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test/network_config.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test/network_controller.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test/data_gen.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_V3/DLSM_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_V2/DLSM_test/network_controller.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_V2/DLSM_test.py",
		"/Users/wenyuan/Documents/PyNN/DLSM_test/data_generator.py",
		"/Users/wenyuan/Documents/PyNN/Test/numpy_test.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/lazyarray.py",
		"/Users/wenyuan/Documents/PyNN/Resbonsiveness/liquid_neurons_v2_Rosponsiveness.py",
		"/Users/wenyuan/Documents/PyNN/connection_matrix_generator.py",
		"/Users/wenyuan/Documents/PyNN/pynn_DLSM_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/delta_rule_test.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/common/populations.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/recording/__init__.py",
		"/Users/wenyuan/Documents/PyNN/Test/RNG_test.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/common/control.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/brian/network.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/brian/connections/otherconnections.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/brian/simulator.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/brian/synapses/spikequeue.py",
		"/Users/wenyuan/Documents/PyNN/Robustness/liquid_neurons_v2_Robustness_dynamic.py",
		"/Users/wenyuan/Documents/PyNN/example_generator.py",
		"/Users/wenyuan/Documents/PyNN/Test/syntax_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/print_tuple_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/write_data_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/write_tuple_test.py",
		"/Users/wenyuan/Documents/PyNN/out_put_syntax_test.py",
		"/Users/wenyuan/Documents/PyNN/delta_rule_test.py",
		"/Users/wenyuan/Documents/PyNN/neuclar/data/mnist.py",
		"/Users/wenyuan/Documents/PyNN/neuclar/__init__.pyc",
		"/Users/wenyuan/Downloads/Liquid_State_Machine/lsm.py",
		"/Users/wenyuan/Downloads/Liquid_State_Machine/lsm_connections_probability.py",
		"/Users/wenyuan/Documents/PyNN/PyNN.sublime-project",
		"/Users/wenyuan/Documents/PyNN/Test/weight_test.py",
		"/Users/wenyuan/Documents/PyNN/Robustness/Range_det/liquid_neurons_v2_Robustness_range_dynamic.py",
		"/Users/wenyuan/Documents/PyNN/network_parameter_generator_HL.py",
		"/Users/wenyuan/Documents/PyNN/Test/record_mempot_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/data_handling_test.py",
		"/Users/wenyuan/Documents/PyNN/Test/liquid_neurons_population_test.py",
		"/Users/wenyuan/Documents/PyNN/STDP_test.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/brian/standardmodels/synapses.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/brian/projections.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_dynamic.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_no_connection.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_no_inh.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_static.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_no_inh_bak.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Rosponsiveness.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_dynamic_bak.py",
		"/Users/wenyuan/Documents/PyNN/plot_robustness.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/parameters.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_range_dynamic.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_range_no_connection.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_range_static.py",
		"/Users/wenyuan/Documents/PyNN/data_handling_test.py",
		"/Users/wenyuan/Documents/PyNN/write_data_test.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_range.py",
		"/Users/wenyuan/Documents/PyNN/plot_test.py",
		"/Users/wenyuan/Documents/PyNN/Robustness_v2.png",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/neo/io/hdf5io.py",
		"/Users/wenyuan/Documents/PyNN/responsiveness_gen.py",
		"/Users/wenyuan/Documents/PyNN/explosion.png",
		"/Users/wenyuan/Documents/PyNN/responsiveness.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness_noinh.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v2_Robustness.py",
		"/Users/wenyuan/Documents/PyNN/for_loop_test.py",
		"/Users/wenyuan/anaconda2/lib/python2.7/site-packages/pyNN/common/projections.py",
		"/Users/wenyuan/Documents/PyNN/input_test_noassembly.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_v1.py",
		"/Users/wenyuan/Documents/PyNN/input_test.py",
		"/Users/wenyuan/Documents/PyNN/RNG_test.py",
		"/Users/wenyuan/Documents/PyNN/record_mempot_test.py",
		"/Users/wenyuan/Documents/PyNN/liquid_neurons_population_test.py",
		"/Users/wenyuan/Documents/PyNN/brian_test.py",
		"/Users/wenyuan/Documents/PyNN/numpy_test.py",
		"/Users/wenyuan/Documents/test_python/test.py"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Inputprj_I",
			"print",
			"record",
			"print",
			"pritn",
			"print",
			"type",
			"print",
			"dec_correct",
			"numpy",
			"static",
			"print",
			"get",
			"order",
			"dec_pop",
			"print",
			"setup",
			"pritn",
			"random",
			"6",
			"plt"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 294.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "pynn_reset_test.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
